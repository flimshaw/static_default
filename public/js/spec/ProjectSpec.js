// Generated by CoffeeScript 1.3.3
(function() {
  var _ref;

  this.app = (_ref = window.app) != null ? _ref : {};

  describe("Navigation", function() {
    beforeEach(function() {
      return this.view = new app.NavView();
    });
    it("loads a view containing our nav items", function() {
      return expect(this.view.render().$el.html()).toMatch(/Directors/);
    });
    return it("updates its state when you click on a link", function() {
      runs(function() {
        return app.router.navigate("/#/entertainment");
      });
      waits(10);
      return runs(function() {
        return expect($("nav a#entertainment").hasClass("onState")).toBe(true);
      });
    });
  });

  describe("Projects", function() {
    beforeEach(function() {
      runs(function() {
        return app.Projects.fetch();
      });
      waitsFor(function() {
        return app.Projects.length === 3;
      });
      return runs(function() {
        return this.projects = app.Projects;
      });
    });
    it("loads properly from the json file", function() {
      return expect(this.projects.models[0].get('title') === "Project 1").toBeTruthy();
    });
    it("can be searched for projects by a particular director", function() {
      expect(this.projects.byDirector('Director 1').length).toBe(2);
      expect(this.projects.byDirector('Director 1').models[0].get('video').director).toBe('Director 1');
      return expect(this.projects.byDirector('Director 1').models[1].get('video').director).toBe('Director 1');
    });
    return it("can return a list of unique directors", function() {
      this.directors = this.projects.listDirectors();
      expect(this.directors.length).toBe(2);
      expect(this.directors[0]).toBe("Director 1");
      return expect(this.directors[1]).not.toBe("Director 2");
    });
  });

  describe("ProjectView", function() {
    beforeEach(function() {
      waitsFor(function() {
        return app.Projects.length > 0;
      });
      return runs(function() {
        return this.project = app.Projects.models[0];
      });
    });
    it("should load the right project from the collection", function() {
      return expect(this.project.get('title') === "Project 1").toBe(true);
    });
    return it("should properly populate a template with that project", function() {
      this.projectView = new app.ProjectView({
        model: this.project
      });
      return expect(this.projectView.render().$el.html()).toMatch(/Director 1/);
    });
  });

  describe("ProjectsView", function() {
    beforeEach(function() {
      return waitsFor(function() {
        return app.Projects.length > 0;
      });
    });
    it("should load 3 projects from our json store", function() {
      return expect(app.Projects.length === 3).toBe(true);
    });
    return it("should populate the template with the collection data", function() {
      this.projectsView = new app.ProjectsView({
        collection: app.Projects
      });
      return expect(this.projectsView.render().$el.html()).toMatch(/Director 3/);
    });
  });

  describe("ViewContainer", function() {
    beforeEach(function() {
      this.testTemplate = $("#test_template").html();
      this.$viewContainer = $("#viewContainer");
      return this.viewContainer = new app.ViewContainer(this.$viewContainer);
    });
    describe("Buffer", function() {
      it("should be able to return how many items are waiting in the queue", function() {
        return expect(this.viewContainer.bufferLength()).not.toBe(null);
      });
      it("should execute new functions to be added to its buffer", function() {
        app.testVar = false;
        this.viewContainer.run(function(next) {
          app.testVar = true;
          setTimeout(next, 10);
          return this;
        });
        expect(this.viewContainer.bufferLength() > 0).toBe(true);
        waits(20);
        return expect(app.testVar).toBe(true);
      });
      return it("should execute all functions sent to it", function() {
        var i, testFun, _i;
        app.testVar = 0;
        testFun = function(next) {
          app.testVar++;
          return next();
        };
        for (i = _i = 1; _i <= 10; i = ++_i) {
          this.viewContainer.run(testFun);
        }
        waits(50);
        return expect(app.testVar).toBe(10);
      });
    });
    return it("should return its animation type with public values", function() {
      return expect(this.viewContainer.animateOutType).toBe("bounceOutLeft");
    });
  });

}).call(this);
